<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cada Inteligente</title>
    <!-- <link rel="stylesheet" href="styles.css"> -->
    <style>
        h1 {
            text-align: center;
        }

        .linha {
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
        }

        .container {
            display: flex;
            flex-direction: column;
        }

        .mostradores {
            display: flex;
            flex-direction: row;
            justify-content: center;
        }

        .mostrador {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            margin: 10px;
            padding: 10px;
            border: 1px solid black;
            border-radius: 5px;

            min-width: 200px;
        }

        .container #btnAutomatico {
            height: 50px;
            width: 700px;
        }

        .linha .tomada {
            margin: 10px;
            padding: 20px 20px;
            border: 1px solid black;
            border-radius: 5px;
            min-width: 340px;
        }

        button:hover {
            cursor: pointer;
            /* background-color: #ddd; */
        }

        button:active {
            background-color: #ccc;
        }

        .active {
            background-color: rgb(37, 150, 190);
        }

        @media only screen and (max-width: 900px) {
            .mostradores {
                flex-direction: column;
                max-width: 90vw;
            }

            .container #btnAutomatico {
                height: 13vh;
                width: 90vw;
            }

            .tomadas {
                flex-direction: column;
            }

            .linha .tomada {
                min-width: 90vw;
            }

            .mostrador {
                min-width: 90vw;
            }
        }
    </style>
</head>

<body>
    <h1>Casa Inteligente</h1>
    <div class="container">
        <div class="mostradores">
            <div class="mostrador">
                <h2>Humidade</h2>
                <p id="humidade">
                    <%= humidade %>%
                </p>
            </div>
            <div class="mostrador">
                <h2>Temperatura</h2>
                <p id="temperatura">
                    <%= temperatura %>ºC
                </p>
            </div>
            <div class="mostrador">
                <h2>luz</h2>
                <p id="luz">
                    <%= lux %>lx
                </p>
            </div>
        </div>

        <div class="linha">
            <button id='btnAutomatico'>Automatico</button>
        </div>

        <div class="linha tomadas">
            <button id="btnTomada1" class="tomada">Tomada 1</button>
            <button id="btnTomada2" class="tomada">Tomada 2</button>
        </div>
    </div>

    <script>
        // on click in button all buttons add class active
        const btnTomadas = document.querySelectorAll('.tomada');
        let btnAutomatico = document.getElementById('btnAutomatico');

        let myIp = "<%= ip %>";
        let port = <%= backendPort %>;

        let backend = 'http://' + myIp + ':' + port;

        async function requestGetEstadoTomada(id) {
            let url = backend + "/api/tomada/" + id

            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.json()
            };
        }

        async function requestLigarTomada(id) {
            let url = backend + "/api/tomada/" + id + "/ligar"
            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.json()
            };
        }

        async function requestDesligarTomada(id) {
            let url = backend + "/api/tomada/" + id + "/desligar"
            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.json()
            };
        }

        async function requestGetAutomaticMode() {
            let url = backend + "/api/automaticMode"
            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.json()
            };
        }

        async function requestLigarAutomaticMode() {
            let url = backend + "/api/automaticMode/ligar"
            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.json()
            };
        }

        async function requestDesligarAutomaticMode() {
            let url = backend + "/api/automaticMode/desligar"
            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.json()
            };
        }

        async function requestGetDados() {
            let url = backend + "/api/sensors/"
            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.json()
            };
        }

        async function atualizaMostradores() {
            let dados = (await requestGetDados()).body;

            document.getElementById('temperatura').innerHTML = dados.temperatura + "ºC";
            document.getElementById('humidade').innerHTML = dados.humidade + "%";
            document.getElementById('luz').innerHTML = dados.lux + "lx";
        }

        async function de1em1segundo() {
            await atualizaMostradores();
        }

        setInterval(de1em1segundo, 1000);

        // ao abrir pagina () => {
            // buscar humidade, temperatura e luz
            // atualizar mostradores

            // verificar se automático esta ligado ou não
                // se estiver ligado
                    //desativar os botões
                // se estiver desligado
                    // buscar estado das tomadas e ativar respetivamente
        // }


        // de 1 em 1 segundo () => {
            // buscar humidade, temperatura e luz
            // atualizar mostradores
        // }

        // de 5 em 5 segundos () => {
            // verificar se automático esta ligado ou não
                // se estiver ligado
                    //desativar os botões
                // se estiver desligado
                    // buscar estado das tomadas e ativar respetivamente
        // } 

        btnAutomatico.onclick = async () => {
            // verificar se já está ativo 
            let automaticMode = (await requestGetAutomaticMode()).body.state;

            if(automaticMode){ // se estiver ativo
                // fazer requisição para desativar modo automático
                await requestDesligarAutomaticMode();

                // colocar botões clickable
                btnAutomatico.classList.remove('active');
                btnTomadas.forEach(btn => {
                    btn.disabled = false;
                });
            }else{ // se estiver desativo
                await requestLigarAutomaticMode(); // fazer requisição para ativar modo automático

                // desativar botões
                btnAutomatico.classList.add('active');
                btnTomadas.forEach(btn => {
                    btn.disabled = true;
                });
            }
        }


        btnTomadas.forEach(async (btn) => {
            let id = btn.id.replace('btnTomada', '');

            let estado = (await requestGetEstadoTomada(id)).body;

            if (estado) {
                btn.classList.add('active');
            } else {
                btn.classList.remove('active');
            }

            btn.onclick = async () => {
                if (btn.disabled) return; // se o botão estiver desativado não fazer nada (modo automático ativo)

                let estado = (await requestGetEstadoTomada(id)).body;
                if (estado) {
                    await requestDesligarTomada(id);
                    btn.classList.remove('active');
                } else {
                    await requestLigarTomada(id);
                    btn.classList.add('active');
                }
            }
        });
        // onclick tomada () => {
            // verificar se modo automático está ligado
            // se estiver ligado
                // não fazer nada
            // se estiver desligado
                // verificar se tomada está ligada ou desligada
                    // se estiver ligada
                        // fazer requisição para desligar tomada
                        // desativar botão
                    // se estiver desligada
                        // fazer requisição para ligar tomada
                        // ativar botão
        // }



    </script>
</body>

</html>