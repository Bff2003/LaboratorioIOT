<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Casa Inteligente</title>
    <!-- <link rel="stylesheet" href="styles.css"> -->
    <style>
        h1 {
            text-align: center;
        }

        .linha {
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
        }

        .container {
            display: flex;
            flex-direction: column;
        }

        .mostradores {
            display: flex;
            flex-direction: row;
            justify-content: center;
        }

        .mostrador {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            margin: 10px;
            padding: 10px;
            border: 1px solid black;
            border-radius: 5px;

            min-width: 200px;
        }

        .container #btnAutomatico {
            height: 50px;
            width: 700px;
        }

        .linha .tomada {
            margin: 10px;
            padding: 20px 20px;
            border: 1px solid black;
            border-radius: 5px;
            min-width: 340px;
        }

        .linha .textboxs {
            margin: 10px;
            min-width: 340px;
        }

        label {
            margin-right: 10px;
            display: block;
        }

        .textbox {
            margin-right: 10px;
        }

        button:hover {
            cursor: pointer;
            /* background-color: #ddd; */
        }

        button:active {
            background-color: #ccc;
        }

        .active {
            background-color: rgb(37, 150, 190);
        }

        @media only screen and (max-width: 900px) {
            .mostradores {
                flex-direction: column;
                max-width: 90vw;
            }

            .container #btnAutomatico {
                height: 13vh;
                width: 90vw;
            }

            .tomadas {
                flex-direction: column;
            }

            .linha .tomada {
                min-width: 90vw;
            }

            .mostrador {
                min-width: 90vw;
            }
        }
    </style>
</head>

<body>
    <h1>Casa Inteligente</h1>
    <div class="container">
        <div class="mostradores">
            <div class="mostrador">
                <h2>Humidade</h2>
                <p id="humidade">
                    <!-- <%= humidade %>% -->
                </p>
            </div>
            <div class="mostrador">
                <h2>Temperatura</h2>
                <p id="temperatura">
                    <!-- <%= temperatura %>ºC -->
                </p>
            </div>
            <div class="mostrador">
                <h2>luz</h2>
                <p id="luz">
                    <!-- <%= lux %>lx -->
                </p>
            </div>
        </div>

        <div class="linha">
            <button id='btnAutomatico'>Automático</button>
        </div>

        <div class="linha tomadas">
            <button id="btnTomada1" class="tomada">Tomada 1</button>
            <button id="btnTomada2" class="tomada">Tomada 2</button>
        </div>

        <div class="linha" id="inputsTemperaturas">
            <label for="temperatura">Temperatura:</label>
            <input type="number" id="temperatura_min" placeholder="Min">
            <input type="number" id="temperatura_max" placeholder="Max">
        </div>

        <div class="linha" id="inputsLuz">
            <label for="luz">Luz:</label>
            <input type="number" id="luz_min" placeholder="Min">
            <input type="number" id="luz_max" placeholder="Max">
        </div>
    </div>

    <script>
        // on click in button all buttons add class active
        const btnTomadas = document.querySelectorAll('.tomada');
        let btnAutomatico = document.getElementById('btnAutomatico');

        let myIp = "<%= ip %>";
        let port = <%= backendPort %>;

        let backend = 'http://' + myIp + ':' + port;

        async function requestGetEstadoTomada(id) {
            let url = backend + "/api/tomada/" + id

            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.json()
            };
        }

        async function requestLigarTomada(id) {
            let url = backend + "/api/tomada/" + id + "/ligar"
            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.text()
            };
        }

        async function requestDesligarTomada(id) {
            let url = backend + "/api/tomada/" + id + "/desligar"
            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.text()
            };
        }

        async function requestGetAutomaticMode() {
            let url = backend + "/api/automaticMode"
            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.json()
            };
        }

        async function requestLigarAutomaticMode() {
            let url = backend + "/api/automaticMode/ligar"
            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.text()
            };
        }

        async function requestDesligarAutomaticMode() {
            let url = backend + "/api/automaticMode/desligar"
            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.text()
            };
        }

        async function requestGetDados() {
            let url = backend + "/api/sensors/"
            let result = await fetch(url);
            return {
                statusCode: result.status,
                body: await result.json()
            };
        }

        async function atualizaMostradores() {
            let dados = (await requestGetDados()).body;

            document.getElementById('temperatura').innerHTML = dados.temperatura + "ºC";
            document.getElementById('humidade').innerHTML = dados.humidade + "%";
            document.getElementById('luz').innerHTML = dados.lux + "lx";
        }

        async function verificarModoAutomatico() {
            let automaticMode = (await requestGetAutomaticMode()).body.state;

            if (automaticMode) { // Se o modo automático estiver ativado
                btnAutomatico.classList.add('active');
                btnTomadas.forEach(btn => {
                    btn.disabled = true;
                });
            } else { // Se o modo automático estiver desativado
                btnAutomatico.classList.remove('active');
                btnTomadas.forEach(async btn => {
                    let id = btn.id.replace('btnTomada', '');
                    let estado = (await requestGetEstadoTomada(id)).body;

                    if (estado) {
                        btn.classList.add('active');
                    } else {
                        btn.classList.remove('active');
                    }

                    btn.disabled = false;
                });
            }
        }

        async function atualizaTodosBotoes() {
            console.log('atualizaTodosBotoes');
            let modoAutomatico = (await requestGetAutomaticMode()).body.state;
            console.log('\tModo automatico: ' + modoAutomatico);
            console.log('\tTomadas: ');

            btnTomadas.forEach(async btn => {
                let id = btn.id.replace('btnTomada', '');
                let estado = (await requestGetEstadoTomada(id)).body;
                console.log('\t\tTomada ' + id + ' ' + estado);

                if (modoAutomatico) btn.disabled = true;
                else btn.disabled = false;

                if (estado) {
                    btn.classList.add('active');
                } else {
                    btn.classList.remove('active');
                }
            });

            if (modoAutomatico) btnAutomatico.classList.add('active');
            else btnAutomatico.classList.remove('active');
        }

        async function atualizaCoresTomadas() {
            console.log('atualizaCoresTomadas');
            btnTomadas.forEach(async btn => {
                let id = btn.id.replace('btnTomada', '');
                let estado = (await requestGetEstadoTomada(id)).body;

                if (estado) {
                    btn.classList.add('active');
                } else {
                    btn.classList.remove('active');
                }
            });
        }

        async function getValoresTemperaturaMinMax(){
            let url = backend + "/api/automaticMode/temperatura/getMinMax"
            let result = await fetch(url);
            result = await result.text();
            return JSON.parse(result);
        }

        async function setValoresTemperaturaMinMax(min, max){
            let url = backend + "/api/automaticMode/temperatura/setMinMax"
            //post 
            let result = await fetch(url, {
                method: 'POST',
                body: JSON.stringify({
                    min: min,
                    max: max
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            // status code != 200
            if(result.status != 200){
                alert("Erro ao atualizar valores de temperatura");
            }
        }

        async function setValoresLuzMinMax(min, max){
            let url = backend + "/api/automaticMode/luz/setMinMax"
            let result = await fetch(url, {
                method: 'POST',
                body: JSON.stringify({
                    min: min,
                    max: max
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            // status code != 200
            if(result.status != 200){
                alert("Erro ao atualizar valores de temperatura");
            }
        }

        async function getValoresLuzMinMax(){
            let url = backend + "/api/automaticMode/luz/getMinMax"
            let result = await fetch(url);
            result = await result.text();
            return JSON.parse(result);
        }

        async function atualizaValoresTemperaturaMinMax(){
            let valores = await getValoresTemperaturaMinMax();
            document.getElementById('temperatura_min').value = valores.min;
            document.getElementById('temperatura_max').value = valores.max;
        }

        async function atualizaValoresLuzMinMax(){
            let valores = await getValoresLuzMinMax();
            console.log(valores);
            document.getElementById('luz_min').value = valores.min;
            document.getElementById('luz_max').value = valores.max;
        }

        window.onload = function () {

            // atualiza mostradores
            atualizaMostradores();
            atualizaTodosBotoes();
            atualizaValoresTemperaturaMinMax();
            atualizaValoresLuzMinMax();

            // on change #temperatura_min #temperatura_max
            document.getElementById('temperatura_min').addEventListener('change', async () => {
                let min = document.getElementById('temperatura_min').value;
                let max = document.getElementById('temperatura_max').value;
                await setValoresTemperaturaMinMax(min, max);
            });

            document.getElementById('temperatura_max').addEventListener('change', async () => {
                let min = document.getElementById('temperatura_min').value;
                let max = document.getElementById('temperatura_max').value;
                await setValoresTemperaturaMinMax(min, max);
            });

            // on change #luz_min #luz_max
            document.getElementById("luz_min").addEventListener('change', async () => {
                let min = document.getElementById('luz_min').value;
                let max = document.getElementById('luz_max').value;
                await setValoresLuzMinMax(min, max);
            });

            document.getElementById("luz_max").addEventListener('change', async () => {
                let min = document.getElementById('luz_min').value;
                let max = document.getElementById('luz_max').value;
                await setValoresLuzMinMax(min, max);
            });

            setInterval(atualizaMostradores, 1000);
            setInterval(() => {
                atualizaTodosBotoes();
            }, 3000);

            btnTomadas.forEach(btn => {
                btn.addEventListener('click', async () => {
                    if ((await requestGetAutomaticMode()).body.state) return;

                    if (btn.classList.contains('active')) {
                        let id = btn.id.replace('btnTomada', '');
                        await requestDesligarTomada(id);
                        btn.classList.remove('active');
                    } else {
                        let id = btn.id.replace('btnTomada', '');
                        await requestLigarTomada(id);
                        btn.classList.add('active');
                    }
                });
            });

            btnAutomatico.addEventListener('click', async () => {
                if (btnAutomatico.classList.contains('active')) {
                    await requestDesligarAutomaticMode();
                    btnAutomatico.classList.remove('active');
                    btnTomadas.forEach(btn => {
                        btn.disabled = false;
                    });
                } else {
                    await requestLigarAutomaticMode();
                    btnAutomatico.classList.add('active');
                    btnTomadas.forEach(btn => {
                        btn.disabled = true;
                    });
                }
            });

        };




    </script>
</body>

</html>